/*
 * Copyright 2010 Christian Schindelhauer, Peter Thiemann, Faisal Aslam, Luminous Fennell and Gidon Ernst.
 * All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 3 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 3 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Faisal Aslam 
 * (aslam AT informatik.uni-freibug.de or studentresearcher AT gmail.com)
 * if you need additional information or have any questions.
 */
package takatuka.tukFormat;

import takatuka.vm.autoGenerated.*;
import takatuka.tukFormat.logic.*;
import takatuka.tukFormat.logic.factory.*;
import takatuka.tukFormat.logic.file.*;
import takatuka.optimizer.bytecode.changer.logic.freq.*;
import takatuka.classreader.logic.factory.*;
import takatuka.classreader.logic.logAndStats.*;
import takatuka.optimizer.bytecode.branchSetter.logic.*;
import takatuka.optimizer.bytecode.changer.logic.*;
import takatuka.optimizer.cpGlobalization.dataObjs.constantPool.*;
import takatuka.tukFormat.verifier.logic.TukFileVerifier;
import takatuka.vm.autoGenerated.forExceptionPrettyPrint.*;
import takatuka.vm.autoGenerated.sizesStat.GenerateSizesStats;
import takatuka.vm.autoGenerated.vmSwitch.*;

/**
 * <p>Title: </p>
 * <p>Description: </p>
 * @author Faisal Aslam
 * @version 1.0
 */
public class StartMeLF extends StartMeBCC {

    private static final LogHolder logHolder = LogHolder.getInstanceOf();
    private static boolean alwaysBigMethods = false;
    public static LFWriter writer = null;
    /**
     * If the JVM is based on a big switch or labels based direct references
     */
    public static boolean generateSwitchNotLables = false;

    protected StartMeLF() {
    }

    public static boolean shouldAlwaysBigMethods() {
        return alwaysBigMethods;
    }

    public static void setAlwaysBigMethods() {
        alwaysBigMethods = true;
    }

    @Override
    public void workAfterWrite() {
        new TukFileVerifier().execute();
    }

    @Override
    public void init(String args[]) throws Exception {
        super.init(args);
        InstructionFrequency.shouldFunction = true;
        writer = new LFWriter(args[1]);
    }

    @Override
    public void setFactoryFacade() {
        super.setFactoryFacade();
        FactoryPlaceholder.getInstanceOf().setFactory(LFFactoryFacade.getInstanceOf());
    }

    @Override
    public void setOutputWriter(String args[]) throws Exception {
        super.outputWriter = writer;//new LFWriter(args[1]);
    }

    private void vmAutoGenerate() {
        try {
            logHolder.addLog("Generating vm related things like native headers....");
            HeaderFileForWantedopCodes.getInstanceOf().execute();
            NativeMethodTable.getInstanceOf().writeTable();
            ReferencesTable.getInstanceOf().writeTable();
            NativeHeaderFilePerJavaClass.getInstanceOf().writeHeaderFiles();
            if (generateSwitchNotLables) {
                GenerateSwitch.getInstanceOf().generate();
            } else {
                //NEW_SWITCH: we generate labels.hc and labels_map.hc below
                GenerateLabels.getInstanceOf().generate();
            }
            GenerateExceptionData.getInstanceOf().generate();
            JVMConfiguration.getInstanceOf().updateJVMConfig(LFFactoryFacade.getTrimAddressValue());
            GenerateSizesStats.getInstanceOf().execute();
        } catch (Exception d) {
            System.err.println("Exception in vmAutoGenerate ="+d);
            System.exit(1);
        }

    }

    @Override
    public void execute(String args[]) throws Exception {
        super.execute(args);
        //ReductionBasedOnBCTravers.stackSizesOfMethods();
        CPStatisticGenerator.getInstanceOf().cacheStatisticsJustAfterGlobalization();
        BranchInstructionsHandler.getInstanceOf().restoreBranchInformation();
        //Miscellaneous.println("Generated <cinit> code....");
        LFEngine.getInstanceOf().execute();
        logHolder.addLog("Loading format is generated....");
        vmAutoGenerate();
        CPStatisticGenerator.getInstanceOf().execute();
    }

    public static void main(String args[]) throws Exception {
        (new StartMeLF()).start(args);
    }
}
