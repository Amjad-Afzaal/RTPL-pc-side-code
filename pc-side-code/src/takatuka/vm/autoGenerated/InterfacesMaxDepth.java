/*
 * Copyright 2010 Christian Schindelhauer, Peter Thiemann, Faisal Aslam, Luminous Fennell and Gidon Ernst.
 * All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 3 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 3 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Faisal Aslam 
 * (aslam AT informatik.uni-freibug.de or studentresearcher AT gmail.com)
 * if you need additional information or have any questions.
 */
package takatuka.vm.autoGenerated;

import takatuka.classreader.dataObjs.*;
import takatuka.optimizer.cpGlobalization.dataObjs.constantPool.GCP.GlobalConstantPool;
import takatuka.optimizer.cpGlobalization.logic.util.*;

/**
 * <p>Title: </p>
 * <p>Description:
 *
 * To find the maximum depth of interfaces. So that JVM can alocate memory.
 *
 * </p>
 * @author Faisal Aslam
 * @version 1.0
 */
public class InterfacesMaxDepth {

    private static final InterfacesMaxDepth maxDepth = new InterfacesMaxDepth();
    private static Oracle oracle = Oracle.getInstanceOf();

    /**
     * constructor is private
     */
    private InterfacesMaxDepth() {
    }

    public static InterfacesMaxDepth getInstanceOf() {
        return maxDepth;
    }

    /**
     * return maximum depth of interfaces.
     * 1. Go to each interface.
     * 2. If it extends an interface then increase the depth to 1.
     * 3. No get the classfiles of those interface and go back to step 1.
     * @return
     */
    public int getMaxDepthOfInterfaces() {
        ClassFileController cont = ClassFileController.getInstanceOf();
        int classSize = cont.getCurrentSize();
        int maxDepth = 0;
        for (int loop = 0; loop < classSize; loop++) {
            ClassFile cFile = (ClassFile) cont.get(loop);
            if (cFile.getAccessFlags().isInterface()) {
                int depth = getMaxDepthOfInterfaces(cFile, 0);
                if (depth > maxDepth) {
                    maxDepth = depth;
                }
            }
        }
        return maxDepth;
    }

    public int getMaxDepthOfInterfaces(ClassFile cInterface, int depth) {
        if (cInterface == null || cInterface.getInterfaceController() == null) {
            return depth;
        }
        InterfaceController interContr = cInterface.getInterfaceController();
        int interSize = interContr.getCurrentSize();
        if (interSize > 0) {
            depth++;
        }
        for (int loop = 0; loop < interSize; loop ++) {
            Un this_class = (Un) interContr.get(loop);
            cInterface = oracle.getClass(this_class, GlobalConstantPool.getInstanceOf());
            int newDepth = getMaxDepthOfInterfaces(cInterface, depth);
            if (newDepth > depth) {
                depth = newDepth;
            }
        }
        return depth;
    }
}
