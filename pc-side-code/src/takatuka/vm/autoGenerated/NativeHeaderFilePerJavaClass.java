/*
 * Copyright 2010 Christian Schindelhauer, Peter Thiemann, Faisal Aslam, Luminous Fennell and Gidon Ernst.
 * All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 3 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 3 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Faisal Aslam 
 * (aslam AT informatik.uni-freibug.de or studentresearcher AT gmail.com)
 * if you need additional information or have any questions.
 */
package takatuka.vm.autoGenerated;

import java.util.*;
import takatuka.classreader.logic.file.*;
import java.io.*;
import takatuka.vm.autoGenerated.tables.*;
import takatuka.classreader.logic.util.*;

/**
 * 
 * Description:
 * <p>
 * 
 * It generates a header file corresponding to each Java class with any native 
 * method. 
 * classIndex
 * 
 * Step 1: Get all the native functions.
 * Step 2: Sort them with their corresponding className
 * Step 3: Start traversing them. 
 * ------- Create a header file per new className encounter
 * ------- Put all the methodsSortedByClassName with same className in that header file
 * 
 * </p> 
 * @author Faisal Aslam
 * @version 1.0
 */
public class NativeHeaderFilePerJavaClass {

    private static String NATIVE_HEADER_PER_JAVA_CLASS_DIRECTORY =
            "NATIVE_HEADER_PER_JAVA_CLASS_DIRECTORY";
    private static final NativeHeaderFilePerJavaClass nHeadFile =
            new NativeHeaderFilePerJavaClass();
    private final static ConfigPropertyReader confPReader = 
            ConfigPropertyReader.getInstanceOf();
    
    public static NativeHeaderFilePerJavaClass getInstanceOf() {
        return nHeadFile;
    }

    private void writeHeader(String methods, String headerFileName) {
        try {
            methods = HeaderFileConstants.headerStart(headerFileName+".h") + "\n\n" + methods;
            methods = methods + HeaderFileConstants.headerEnd();
            String fileName = confPReader.getConfigProperty(NATIVE_HEADER_PER_JAVA_CLASS_DIRECTORY);
            File file = new File(fileName);
            if (!file.isDirectory()) {
                file.mkdirs();
            }

            ClassFileWriter.writeFile(new File(file.getAbsolutePath() + "/" + headerFileName + ".h"),
                    methods.toString());
        } catch (Exception d) {
            d.printStackTrace();
            Miscellaneous.exit();
        }
    }

    private class ClassNameComparator implements Comparator<ReferenceTableEntry> {
        public int compare(ReferenceTableEntry o1, ReferenceTableEntry o2) {
            return o1.getClassName().compareTo(o2.getClassName());
        }
    }
    
    public void writeHeaderFiles() {
        ReferenceTableCreator tableCreator = ReferenceTableCreator.getInstanceOf();
        TreeSet<ReferenceTableEntry> sortedById = tableCreator.getMethodTable();
        //Miscellaneous.println("\n\n\n\nI am here 1....... "+sortedById);        
        Vector<ReferenceTableEntry> methodsSortedByClassName = 
                new Vector();
        methodsSortedByClassName.addAll(sortedById);
        QuickSort.sort(methodsSortedByClassName, new ClassNameComparator());
        //Miscellaneous.println("\n\n\n\nI am here 2....... "+methodsSortedByClassName);
        String className = null;
        String classMethods = "";
        String endofMethod = "();\n";
        String startofMethod = "STATIC void ";
        Iterator<ReferenceTableEntry> it = methodsSortedByClassName.iterator();
        
        while (it.hasNext()) {
            ReferenceTableEntry refEntry =  it.next();
            if (refEntry.getNativeId() < 0) {
                continue; //not a native method
            }
            //time to create a headerfile
            if (className != null && !(className.equals(refEntry.getClassName()))) {
                writeHeader(classMethods, className);
                classMethods = "";
            }
            className = refEntry.getClassName();
            classMethods += startofMethod + refEntry.getLongName() + endofMethod;
        }
        if (className != null)
            writeHeader(classMethods, className);
    }

    private class ComparatorForPerClassSorting implements Comparator {

        @Override
        public int compare(Object o1, Object o2) {
            ReferenceTableEntry entry1 = (ReferenceTableEntry) o1;
            ReferenceTableEntry entry2 = (ReferenceTableEntry) o2;
            if (entry1.getClassName().equals(entry2.getClass())) {
                return 0;
            } else {
                return entry1.compareTo(entry2);
            }
        }
    }
}
