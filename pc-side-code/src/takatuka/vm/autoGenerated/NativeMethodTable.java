/*
 * Copyright 2010 Christian Schindelhauer, Peter Thiemann, Faisal Aslam, Luminous Fennell and Gidon Ernst.
 * All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 3 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 3 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Faisal Aslam 
 * (aslam AT informatik.uni-freibug.de or studentresearcher AT gmail.com)
 * if you need additional information or have any questions.
 */
package takatuka.vm.autoGenerated;

import takatuka.classreader.logic.file.*;
import java.util.*;
import java.io.*;
import takatuka.vm.autoGenerated.tables.*;
import takatuka.classreader.logic.util.*;

/**
 * <p>Title: </p>
 * <p>Description:
 * create a header file for native methods
 * The header file has method name (in term of define not string) and 
 * native id (in comments)
 * The method names are generated based on Java Native Interface Specification.
 * see http://java.sun.com/j2se/1.3/docs/guide/jni/spec/design.doc.html#615 
 * However, we have one exception we always generate long names and never short names.
 * 
 * 
 * </p>
 * @author Faisal Aslam
 * @version 1.0
 */
public class NativeMethodTable {

    private static String METHOD_TABLE_PROPERTY = "NATIVE_METHOD_TABLE_HEADER";
    private static final NativeMethodTable nativeMethodTb = new NativeMethodTable();
    private static final ConfigPropertyReader cPropReader = ConfigPropertyReader.getInstanceOf();

    protected NativeMethodTable() {
    }

    public static NativeMethodTable getInstanceOf() {
        return nativeMethodTb;
    }

    protected StringBuffer getTableString(StringBuffer bigString, TreeSet table) {
        String longName = null;
        Iterator it = table.iterator();
        int count = 0;
        while (it.hasNext()) {
            ReferenceTableEntry entry = (ReferenceTableEntry) it.next();
            if (entry.getNativeId() < 0) {
                continue; //not a native method
            }
            while (entry.getNativeId() != count) {
                longName = "NULL,";
                bigString.append(" " + longName + "\n");
                count++;
            }
            longName = "/*0x" + Integer.toHexString(entry.getNativeId() & 0xFFFFFFFF) +
                    "*/ " + entry.getLongName() + ",";

            count++;
            bigString.append(" " + longName + "\n");
        }
        return bigString;
    }

    public void writeTable() {
        try {
            TreeSet methodTable = ReferenceTableCreator.getInstanceOf().getMethodTable();
            TreeSet sortedMethodTable = new TreeSet(new NativeIdComparator());
            sortedMethodTable.addAll(methodTable);
            //Miscellaneous.println("--------- here "+sortedMethodTable);
            StringBuffer bigString = new StringBuffer(HeaderFileConstants.AUTO_GENERATED_MSG);
            bigString.append("{\n");
            bigString = getTableString(bigString, sortedMethodTable);
            bigString.append("};\n");
            ClassFileWriter.writeFile(new File(cPropReader.
                    getConfigProperty(METHOD_TABLE_PROPERTY)),
                    bigString.toString());


        } catch (Exception d) {
            d.printStackTrace();
            Miscellaneous.exit();
        }
    }

    private class NativeIdComparator implements Comparator<ReferenceTableEntry> {

        public int compare(ReferenceTableEntry ref1, ReferenceTableEntry ref2) {
            return new Integer(ref1.getNativeId()).compareTo(ref2.getNativeId());
        }
    }
}


