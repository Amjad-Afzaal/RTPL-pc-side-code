/*
 * Copyright 2010 Christian Schindelhauer, Peter Thiemann, Faisal Aslam, Luminous Fennell and Gidon Ernst.
 * All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 3 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 3 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Faisal Aslam 
 * (aslam AT informatik.uni-freibug.de or studentresearcher AT gmail.com)
 * if you need additional information or have any questions.
 */
package takatuka.vm.autoGenerated;

import takatuka.classreader.dataObjs.attribute.*;
import takatuka.classreader.logic.file.*;
import java.util.*;
import takatuka.classreader.dataObjs.*;
import takatuka.classreader.dataObjs.constantPool.*;
import takatuka.classreader.logic.constants.*;
import takatuka.classreader.logic.factory.*;
import takatuka.tukFormat.dataObjs.*;
import takatuka.tukFormat.dataObjs.constantpool.*;
import takatuka.optimizer.cpGlobalization.dataObjs.constantPool.GCP.*;
import takatuka.optimizer.cpGlobalization.logic.util.*;
import takatuka.classreader.logic.util.*;

/**
 * <p>Title: </p>
 *
 * <p>Description:
 * 
 * </p>
 * @author Faisal Aslam
 * @version 1.0
 */
public class StaticCreator {

    private static long newNameCount = 0;
    private static final ConfigPropertyReader configPropReader =
            ConfigPropertyReader.getInstanceOf();
    private static final Properties prop = configPropReader.getProperties(ConfigPropertyReader.CONFIG_PROPERTY);
    private static final StaticCreator staticCreator = new StaticCreator();
    private static final String STATIC_FUNCTION_HEADER_FILE_NAME = "STATIC_FUNCTION_HEADER";
    //we assume that all the function in all the classes has same name index because
    // we have already performed the globalization
    private static int nameIndexForclinitFunction = -1;
    private ClassFile specialForStatics = null;
    private static final String STATIC_FUNCTION_NAME = "<clinit>";
    private HashMap cacheForStaticData = new HashMap();
    private static FactoryFacade factory = FactoryPlaceholder.getInstanceOf().getFactory();

    private StaticCreator() {
    }

    public static StaticCreator getInstanceOf() {
        return staticCreator;
    }

    /**
     * this function should be call after classInfo has been globalized and before
     * sorting of fieldRefInfos. 
     * It only change the classIndex in the fieldReferece of static fields to SpecialForStatics.
     */
    public void moveStaticFieldReferences() {
        getAllStaticFieldsAndMarkThemStatic();
    }

    /**
     * It works as follows
     * 1. Get StaticMethodRefInfo of from contant pool of InterfaceMethodRefInfo
     * 2. sort the vector of StaticMethodRefInfo with classId
     * 3. print them in a header 
     */
    public void generateHeaderFileWithClinitMethodAddress() throws Exception {
        Oracle oracle = Oracle.getInstanceOf();
        GlobalConstantPool pOne = GlobalConstantPool.getInstanceOf();
        Vector allmethodRefInfo = pOne.getAll(TagValues.CONSTANT_Methodref);
        TreeMap<LFMethodRefInfo, Integer> map = new TreeMap<LFMethodRefInfo, Integer>(new LFMethodRefInfoComp());
        for (int loop = 0; loop < allmethodRefInfo.size(); loop++) {
            if (allmethodRefInfo.elementAt(loop) instanceof EmptyInfo) {
                continue;
            }
            LFMethodRefInfo methodInfo = (LFMethodRefInfo) allmethodRefInfo.elementAt(loop);
            String str = oracle.methodOrFieldName(methodInfo, pOne);
            if (str.equals("<clinit>")) {
                map.put(methodInfo, loop);
            }
        }
        //make then bigendian
        LFRevUn.bigEndian = true;
        writeInHeaderClinitTable(map);
        LFRevUn.bigEndian = false; //do not forget it.
    }

    private class LFMethodRefInfoComp implements Comparator<LFMethodRefInfo> {

        public int compare(LFMethodRefInfo arg0, LFMethodRefInfo arg1) {
            return new Integer(arg0.getIndex().intValueUnsigned()).compareTo(arg1.getIndex().intValueUnsigned());
        }
    }

    private void writeInHeaderClinitTable(TreeMap<LFMethodRefInfo, Integer> table) throws Exception {
        String fileName = configPropReader.getConfigProperty(STATIC_FUNCTION_HEADER_FILE_NAME);
        if (fileName == null) {
            Miscellaneous.printlnErr("Cannot file configuration property " + STATIC_FUNCTION_HEADER_FILE_NAME);
            Miscellaneous.exit();
        }
        HeaderFileConstants.writeHeaderFile(createDataStringFromClinitTable(table),
                fileName);
    }

    private String createDataStringFromClinitTable(TreeMap<LFMethodRefInfo, Integer> map) throws Exception {
        String ret = "{\n";
        int dummyClassIndex = 0;
        GlobalConstantPool pOne = GlobalConstantPool.getInstanceOf();
        Set set = map.keySet();
        Iterator<LFMethodRefInfo> it = set.iterator();
        while (it.hasNext()) {
            LFMethodRefInfo sMRefInfo = it.next();
            //if class is not in tuk file (may be due to dead-code removal)
            while (sMRefInfo.getIndex().intValueUnsigned() != dummyClassIndex) {
                ret += "0x" + factory.createUn(0).trim(2) + ",    /* classIndex=" +
                        dummyClassIndex + "*/" + "\n";
                dummyClassIndex++;
            }
            ret += "0x" + factory.createUn(map.get(sMRefInfo)).trim(2) + ",/*" + sMRefInfo + "*/\n";
            dummyClassIndex++;
        }
        while (dummyClassIndex < pOne.getCurrentSize(TagValues.CONSTANT_Class)) {
            ret += "0x" + factory.createUn(0).trim(2) + ",    /* classIndex=" +
                    dummyClassIndex + "*/" + "\n";
            dummyClassIndex++;
        }
        ret += "};";
        return ret;
    }

    /**
     * Find ClassFile using classIndex of FieldRefInfo
     * Check if the FieldInfo with same description exist in the classFile.
     * -- If no such field exist then return false (as it could not be static)
     * -- if fieldInfo does exists then check if that is static.
     * ---- If it is static then return true else return false
     * @param fieldRef
     * @return
     */
    private boolean isStaticFieldRef(FieldRefInfo fieldRef) {
        GlobalConstantPool pOne = GlobalConstantPool.getInstanceOf();
        NameAndTypeInfo nAt = null;
        nAt = (NameAndTypeInfo) pOne.get(fieldRef.getNameAndTypeIndex().intValueUnsigned(),
                TagValues.CONSTANT_NameAndType);

        String name = ((UTF8Info) pOne.get(nAt.getIndex().intValueUnsigned(),
                TagValues.CONSTANT_Utf8)).convertBytes();
        String desc = ((UTF8Info) pOne.get(nAt.getDescriptorIndex().intValueUnsigned(),
                TagValues.CONSTANT_Utf8)).convertBytes();
        //now get the class
        ClassInfo cInfo = (ClassInfo) pOne.get(fieldRef.getIndex().intValueUnsigned(),
                TagValues.CONSTANT_Class);
        UTF8Info utf8 = (UTF8Info) pOne.get(cInfo.getIndex().intValueUnsigned(),
                TagValues.CONSTANT_Utf8);

        //Miscellaneous.println("This pointer = "+cInfo.getIndex().intValueUnsigned());
        ClassFile file = ClassFileController.getInstanceOf().
                getClassByFullyQualifiedName(utf8.convertBytes());
        if (file == null) {
            return false; //may be not loaded
        }
        FieldInfo field = findField(name, desc, file);
        if (field != null && field.getAccessFlags().isStatic()) {
            cacheStaticFieldForSpeed(file, field);
            return true;
        }
        return false;
    }

    private void cacheStaticFieldForSpeed(ClassFile file, FieldInfo field) {
        Vector fields = (Vector) cacheForStaticData.get(file);
        if (fields == null) {
            fields = new Vector();
            cacheForStaticData.put(file, fields);
        }
        fields.addElement(field);
    }

    private static FieldInfo findField(String name, String description,
            ClassFile file) {
        ClassFile.currentClassToWorkOn = file;
        FieldInfoController cont = file.getFieldInfoController();
        int size = cont.getCurrentSize();
        MultiplePoolsFacade cp = file.getConstantPool();
        for (int loop = 0; loop < size; loop++) {
            FieldInfo field = (FieldInfo) cont.get(loop);
            UTF8Info utf8Name = (UTF8Info) cp.get(field.getNameIndex().
                    intValueUnsigned(),
                    TagValues.CONSTANT_Utf8);
            String myName = utf8Name.convertBytes();
            UTF8Info utf8Desc = (UTF8Info) cp.get(field.getDescriptorIndex().
                    intValueUnsigned(),
                    TagValues.CONSTANT_Utf8);
            String myDesc = utf8Desc.convertBytes();
            if (name.equals(myName) && description.equals(myDesc)) {
                return field;
            }
        }
        return null;
    }

    private Vector getAllStaticFieldsAndMarkThemStatic() {
        GlobalConstantPool pOne = GlobalConstantPool.getInstanceOf();
        Vector ret = new Vector();
        int size = pOne.getCurrentSize(TagValues.CONSTANT_Fieldref);
        for (int loop = 0; loop < size; loop++) {
            FieldRefInfo fieldRef = (FieldRefInfo) pOne.get(loop,
                    TagValues.CONSTANT_Fieldref);
            if (isStaticFieldRef((FieldRefInfo) fieldRef)) {
                fieldRef.isStatic = true;
                ret.addElement(fieldRef);
            }
        }
        return ret;

    }

    private MethodInfo getConstructorFromSpecialForStatic(ClassFile specialForStatics) throws Exception {
        MethodInfoController methodInfoCont = specialForStatics.getMethodInfoController();
        // Miscellaneous.println("Can you see me dude ==== "+methodInfoCont.getCurrentSize());
        // Miscellaneous.println("Can you see me dude 2==== "+methodInfoCont.get(0));

        return (MethodInfo) methodInfoCont.get(0); //should have exactly one function and that function should be constructor.

    }

    private static int getNameIndexForclinitFunction(ClassFile file) throws Exception {
        if (nameIndexForclinitFunction > 0) {
            return nameIndexForclinitFunction;
        }

        MethodInfoController methodInfoCont = file.getMethodInfoController();
        MethodInfo mInfo = null;
        UTF8Info nameUTF8 = null;
        GlobalConstantPool cp = GlobalConstantPool.getInstanceOf();
        for (int loop = 0; loop < methodInfoCont.getCurrentSize(); loop++) {
            mInfo = (MethodInfo) methodInfoCont.get(loop);
            nameUTF8 = (UTF8Info) cp.get(mInfo.getNameIndex().intValueUnsigned(),
                    TagValues.CONSTANT_Utf8);
            if (nameUTF8.convertBytes().equals(STATIC_FUNCTION_NAME)) {
                nameIndexForclinitFunction = mInfo.getNameIndex().intValueUnsigned();
                break;
            }
        }
        return nameIndexForclinitFunction;
    }

    private void rename(FieldInfo fInfo, int fRefInfoIndex, HashMap uniqueNaTMap) {

        Oracle oracle = Oracle.getInstanceOf();
        NameAndTypeInfo nAt = oracle.createNameAndType(fInfo);
        if (uniqueNaTMap.get(nAt.getIndex()) == null) {
            uniqueNaTMap.put(nAt.getIndex(), " ");
            return; // no need to rename
        }
        String fieldNewName = "__" + newNameCount++;
        int nAtIndex = oracle.renameFieldRefInfo(fRefInfoIndex, fieldNewName);
        if (nAtIndex != -1) {
            oracle.renameFieldInfo(fInfo, nAtIndex);
        } else {
            oracle.renameFieldInfo(fInfo, fieldNewName);
        }
    }

    /**
     * get All the fields with static flag set
     * remove them from original ClassFile.
     * add in the class specially for statics named as SpecialForStatics
     *
     * @param file
     * @param specialForStaticClass
     * @param fields
     * @param uniqueNaT
     * @throws java.lang.Exception
     */
    private void getAndAddStaticFields(ClassFile file,
            ClassFile specialForStaticClass, Vector fields, HashMap uniqueNaT) throws Exception {
        FieldInfo fInfo = null;
        GlobalConstantPool pOne = GlobalConstantPool.getInstanceOf();
        Oracle oracle = Oracle.getInstanceOf();
        int size = fields.size();
        FieldInfoController fieldInfoCont = file.getFieldInfoController();
        //fieldInfoCont.setMaxSize(-1); //infinity so that other fields could be added
        for (int loop = 0; loop < size; loop++) {
            //Miscellaneous.println(fieldInfoCont.getCurrentSize());
            fInfo = (FieldInfo) fields.get(loop);
            //Miscellaneous.println(" ------00ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ0ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ0ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ0 "+((LFFieldInfo)fInfo).getName());
            if (fInfo.getAccessFlags().isStatic()) {
                int cpReference = oracle.existFieldInfoCPIndex(fInfo, false,
                        file.getThisClass().intValueUnsigned());

                //remove from original class
                boolean removed = fieldInfoCont.remove(fInfo);

                rename(fInfo, cpReference, uniqueNaT);
                //fInfo is used to make sure if not remove then not add correctly too.
                specialForStatics.getFieldInfoController().add(fInfo);
                if (cpReference != -1) {
                    FieldRefInfo fieldRef = (FieldRefInfo) pOne.get(cpReference, TagValues.CONSTANT_Fieldref);
                    fieldRef.setIndex(specialForStaticClass.getThisClass());
                }
                // oracle.reCache();
                //one elements is remove so...
            }
        }
    }

    /**
     * get the <clinit> function of the class and remove it from original ClassFile
     *
     * Add the code (minus return statements) of clinit functions in
     * SpecialForStatics constructor
     *
     * @param file ClassFile
     * @throws Exception
     */
    private void removeClinitFuncAndAddInSpecialForStatics(ClassFile file) throws Exception {
        MethodInfoController methodInfoCont = file.getMethodInfoController();
        MethodInfo mInfo = null;
        CodeAtt codeAtt = null;
        int clinitContIndex = getClinitFunctionsControllerIndex(file);
        if (clinitContIndex == -1) {
            return;
        }
        mInfo = (MethodInfo) methodInfoCont.get(clinitContIndex);

        //remove from original class
        mInfo = (MethodInfo) methodInfoCont.remove(clinitContIndex);

        //get the codeAtt of the function
        codeAtt = mInfo.getCodeAtt();

        //add those instructions in constructor of special class
        MethodInfo constuctor =
                getConstructorFromSpecialForStatic(specialForStatics);
        constuctor.getCodeAtt().merge(codeAtt);

    }

    public static int getClinitFunctionsControllerIndex(ClassFile file) throws Exception {
        MethodInfoController methodInfoCont = file.getMethodInfoController();
        MethodInfo mInfo = null;

        for (int loop = 0; loop < methodInfoCont.getCurrentSize(); loop++) {
            mInfo = (MethodInfo) methodInfoCont.get(loop);

            //check if it is clinit function (by comparing it name index)
            if (mInfo.getNameIndex().intValueUnsigned() ==
                    getNameIndexForclinitFunction(file)) {
                return loop;
            }
        }
        return -1;
    }
}
