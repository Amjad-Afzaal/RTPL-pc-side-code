/*
 * Copyright 2010 Christian Schindelhauer, Peter Thiemann, Faisal Aslam, Luminous Fennell and Gidon Ernst.
 * All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 3 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 3 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Faisal Aslam 
 * (aslam AT informatik.uni-freibug.de or studentresearcher AT gmail.com)
 * if you need additional information or have any questions.
 */
package takatuka.vm.autoGenerated.sizesStat;

import java.io.*;
import takatuka.classreader.dataObjs.*;
import takatuka.classreader.logic.util.*;
import takatuka.optimizer.cpGlobalization.logic.util.Oracle;
import takatuka.tukFormat.dataObjs.*;
import takatuka.tukFormat.logic.file.*;
import takatuka.tukFormat.logic.util.*;

/**
 * <p>Title: </p>
 * <p>Description:
 * It generates files named methods_sizes.txt and classes_size.txt
 * containing sizes of all the classfiles and functions. Theses sizes are sorted.
 *
 * </p>
 * @author Faisal Aslam
 * @version 1.0
 */
public class GenerateSizesStats {

    private final static GenerateSizesStats sizeStats = new GenerateSizesStats();
    private BaseObjectSizeController sizeContr = BaseObjectSizeController.getInstanceOf();

    private GenerateSizesStats() {
    }

    public static GenerateSizesStats getInstanceOf() {
        return sizeStats;
    }

    public void execute() {
        ClassFileController contr = ClassFileController.getInstanceOf();
        int size = contr.getCurrentSize();
        //Miscellaneous.println("See me ----------- "+size);
        for (int loop = 0; loop < size; loop++) {
            LFClassFile cFile = (LFClassFile) contr.get(loop);
            int classSize = SizeCalculator.getObjectSize(cFile);
            sizeContr.addSize(cFile, classSize);
            methodSize(cFile.getMethodInfoController());
        }
        writeSizesInFile();
    }

    private void methodSize(MethodInfoController contr) {
        int size = contr.getCurrentSize();
        for (int loop = 0; loop < size; loop++) {
            LFMethodInfo method = (LFMethodInfo) contr.get(loop);
            //Miscellaneous.println("----> "+Oracle.getInstanceOf().getMethodString(method));
            int methodSize = SizeCalculator.getObjectSize(method);
            sizeContr.addSize(method, methodSize);
        }
    }

    private void writeSizesInFile() {
        try {
            String outputFile = LFWriter.
            getOutputDirectory() + "/sizses_stat.txt";
            //Miscellaneous.println("See me ---------------- "+outputFile);
            File file = new File(outputFile);
            if (file.exists()) {
                file.delete();
            }
            FileWriter rm = new FileWriter(file);
            BufferedWriter out = new BufferedWriter(rm);
            out.write(sizeContr.toString());
            out.close();
            rm.close();
        } catch (Exception d) {
            d.printStackTrace();
            Miscellaneous.exit();
        }

    }
}
