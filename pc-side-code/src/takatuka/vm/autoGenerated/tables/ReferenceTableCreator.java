/*
 * Copyright 2010 Christian Schindelhauer, Peter Thiemann, Faisal Aslam, Luminous Fennell and Gidon Ernst.
 * All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 3 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 3 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Faisal Aslam 
 * (aslam AT informatik.uni-freibug.de or studentresearcher AT gmail.com)
 * if you need additional information or have any questions.
 */
package takatuka.vm.autoGenerated.tables;

import takatuka.classreader.dataObjs.*;
import takatuka.tukFormat.dataObjs.*;
import java.util.*;
import takatuka.classreader.logic.constants.*;
import takatuka.classreader.logic.util.*;
import takatuka.optimizer.cpGlobalization.dataObjs.constantPool.GCP.*;
import takatuka.tukFormat.dataObjs.constantpool.*;

public class ReferenceTableCreator {

    private TreeSet classTable = null;
    private TreeSet methodTable = null;
    private TreeSet fieldTable = null;
    private static final ReferenceTableCreator refTableCreator = new ReferenceTableCreator();

    public static ReferenceTableCreator getInstanceOf() {
        return refTableCreator;
    }

    public TreeSet getClassTable() {
        createReferenceTables();
        return classTable;
    }

    public TreeSet getMethodTable() {
        createReferenceTables();
        return methodTable;
    }

    public TreeSet getFieldTable() {
        createReferenceTables();
        return fieldTable;
    }

    private void createFieldMethodTables(ControllerBase fieldMethodCont,
            TreeSet table, ClassFile cFile) {
        ReferenceTableEntryCreator entryCreator = ReferenceTableEntryCreator.getInstanceOf();
        LFFieldInfo lfMInfo = null;
        int mSize = fieldMethodCont.getCurrentSize();
        for (int mIndex = 0; mIndex < mSize; mIndex++) {
            lfMInfo = (LFFieldInfo) fieldMethodCont.get(mIndex);
            Object obj = entryCreator.createTableEntry(lfMInfo, cFile);
            if (obj != null) {
                table.add(obj);
            }
        }
    }

    private void createReferenceTables() {
        if (classTable != null) {
            return; //table already created once
        }
        classTable = new TreeSet();
        methodTable = new TreeSet();
        fieldTable = new TreeSet();
        //get all the functions
        ClassFileController cfCont = ClassFileController.getInstanceOf();
        int size = cfCont.getCurrentSize();
        ReferenceTableEntryCreator entryCreator = ReferenceTableEntryCreator.getInstanceOf();

        ClassFile cFile = null;
        ControllerBase fieldMethodCont = null;

        for (int index = 0; index < size; index++) {
            cFile = (ClassFile) cfCont.get(index);
            ReferenceTableEntry entry = entryCreator.createTableEntry(null, cFile);
            if (entry != null) {
                classTable.add(entry);
            }

            fieldMethodCont = cFile.getMethodInfoController();
            createFieldMethodTables(fieldMethodCont, methodTable, cFile);

            fieldMethodCont = cFile.getFieldInfoController();
            createFieldMethodTables(fieldMethodCont, fieldTable, cFile);
        }
        createArrayClassEntries(classTable);
    }

    /**
     * 1. go to each classInfo of the CP.
     * 2. Check if its name start with [. If not then go back to step 1, otherwise continue with step 3.
     * 3. create a reference table entry.
     *
     * @param classTable
     */
    private void createArrayClassEntries(TreeSet<ReferenceTableEntry> classTable) {
        try {
            GlobalConstantPool gcp = GlobalConstantPool.getInstanceOf();
            int classInfoCount = gcp.getCurrentSize(TagValues.CONSTANT_Class);

            for (int loop = 1; loop < classInfoCount; loop++) {
                LFClassInfo cInfo = (LFClassInfo) gcp.get(loop, TagValues.CONSTANT_Class);
                if (cInfo.getClassName().trim().startsWith("[")) {
                   String longName = ReferenceTableEntryCreator.createName(cInfo.getClassName(), null, null);
                   classTable.add(new ReferenceTableEntry(longName, cInfo.getClassName(),
                           -1, loop, cInfo.getClassName()));
                }
            }
        } catch (Exception d) {
            d.printStackTrace();
            Miscellaneous.exit();
        }
    }
}
