/*
 * Copyright 2010 Christian Schindelhauer, Peter Thiemann, Faisal Aslam, Luminous Fennell and Gidon Ernst.
 * All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 3 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 3 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Faisal Aslam 
 * (aslam AT informatik.uni-freibug.de or studentresearcher AT gmail.com)
 * if you need additional information or have any questions.
 */
package takatuka.vm.autoGenerated.tables;

import org.apache.commons.lang.builder.HashCodeBuilder;

public class ReferenceTableEntry implements Comparable {

    private String longName = null;
    private int nativeId = 0;
    private int referenceId = 0;
    private String className = null;
    private String originalName = null;

    public ReferenceTableEntry(String longName, String originalName, int nativeId, int referenceId, 
            String className) {
        this.longName = longName;
        this.nativeId = nativeId;
        this.referenceId = referenceId;
        this.className = className;
        this.originalName = originalName;
    }

    public int getReferenceCPId() {
        return referenceId;
    }
    public String getLongName() {
        return longName;
    }
    
    public int getNativeId() {
        return nativeId;
    }
    
    public String getClassName() {
        return className;
    }
    
    public String getOriginalName() {
        return originalName;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (obj == null || !(obj instanceof ReferenceTableEntry)) {
            return false;
        }
        ReferenceTableEntry input = (ReferenceTableEntry)obj;
        if (input.getLongName().equals(longName)) {
            return true;
        }
        return false;
    }

    @Override
    public int hashCode() {
        return (new HashCodeBuilder()).append(longName).toHashCode();
    }
    
    @Override
    public int compareTo(Object obj) {
        ReferenceTableEntry input = (ReferenceTableEntry)obj;
        return new Integer(referenceId).compareTo(input.referenceId);       
    }
    
    @Override
    public String toString() {
        return "\nlongName="+longName+"/*"+originalName +"*/, nativeId="+nativeId+", referenceId="+
                referenceId+", className="+className;
    }
            
}
