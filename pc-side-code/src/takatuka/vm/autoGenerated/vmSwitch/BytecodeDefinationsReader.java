/*
 * Copyright 2010 Christian Schindelhauer, Peter Thiemann, Faisal Aslam, Luminous Fennell and Gidon Ernst.
 * All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 3 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 3 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Faisal Aslam 
 * (aslam AT informatik.uni-freibug.de or studentresearcher AT gmail.com)
 * if you need additional information or have any questions.
 */
package takatuka.vm.autoGenerated.vmSwitch;

import java.io.*;
import java.util.*;
import takatuka.classreader.dataObjs.attribute.*;
import takatuka.classreader.logic.file.*;
import takatuka.classreader.logic.util.*;

/**
 * 
 * Description:
 * <p>
 *
 * This class read bytecode defination file. The bytecode defination file is to
 * facilitate automatic generation of jvm switch.
 *
 * </p> 
 * @author Faisal Aslam
 * @version 1.0
 */
class BytecodeDefinationsReader {

    private static final BytecodeDefinationsReader bcodeDefReader = new BytecodeDefinationsReader();
    private static final String FILE_NAME =
            PropertyReader.createName("bytecode_definitions.txt");
    private static final String LINE_START = "@OP_";

    private BytecodeDefinationsReader() {
    }

    public static BytecodeDefinationsReader getInstanceOf() {
        return bcodeDefReader;
    }

    private void parseLineFromFile(String line, OpCodeAndCode opCodeAndCode) {
        try {
            String mnemonic = null;
            StringTokenizer stoken = new StringTokenizer(line, " ");
            if (line.contains("@OP_LDC_W 3 (uint16_t) bytecode_getarg_unsigned")) {
                Miscellaneous.println("Stop here");
            }
            if (opCodeAndCode.opCode == -1) {
                mnemonic = stoken.nextToken().trim();
                //Miscellaneous.println("--- here here --- " + line);
                mnemonic = mnemonic.substring(LINE_START.length());
                opCodeAndCode.opCode = Instruction.getOpcode(mnemonic);

                while (stoken.hasMoreTokens()) {
                    String argType = stoken.nextToken().trim();
                    opCodeAndCode.argumentType.addElement(argType);
                    opCodeAndCode.argumentFunction.addElement(stoken.nextToken().trim());
                }
                if (stoken.hasMoreElements()) {
                }
                if (opCodeAndCode.opCode == -1) {
                    Miscellaneous.printlnErr("Invalid string in bytecode "
                            + "definations file, " + line);
                    Miscellaneous.exit();
                }
            } else {
                if (opCodeAndCode.code.trim().length() > 0) {
                    opCodeAndCode.code += GenerateSwitch.CODE_START;
                }
                opCodeAndCode.code = opCodeAndCode.code + line + "";
            }
        } catch (Exception d) {
            Miscellaneous.printlnErr("Invalid Bytecode definiation file. Error at parsing line=\""
                    + line + "\"");
            d.printStackTrace();
            Miscellaneous.exit();
        }
    }

    public Map<Integer, OpCodeAndCode> readFromFile() {
        TreeMap<Integer, OpCodeAndCode> opcodeAndcodeMap = new TreeMap();
        try {
            if (!(new File(FILE_NAME).exists())) {
                throw new Exception("Cannot find file " + FILE_NAME);
            }
            RandomAccessFile rm = new RandomAccessFile(FILE_NAME, "rw");
            String line = null;

            OpCodeAndCode opcodeAndCode = new OpCodeAndCode();
            while (rm.getFilePointer() < rm.length()) {
                line = rm.readLine().trim();
                if (line.trim().startsWith("#") || line.length() == 0) {
                    continue;
                }
                //Miscellaneous.println("debug = " + line);
                //if (line.contains("REFERENCE")) {
                //    Miscellaneous.println("Stop here");
                //}
                if (line.startsWith(LINE_START)) {
                    if (opcodeAndCode.opCode != -1) {
                        updateMap(opcodeAndcodeMap, opcodeAndCode);
                    }
                    opcodeAndCode = new OpCodeAndCode();
                }
                parseLineFromFile(line, opcodeAndCode);
            }
            if (opcodeAndCode.opCode != -1) {
                updateMap(opcodeAndcodeMap, opcodeAndCode);
            }
        } catch (Exception d) {
            d.printStackTrace();
            Miscellaneous.exit();
        }
        return opcodeAndcodeMap;
    }

    private void updateMap(Map<Integer, OpCodeAndCode> opcodeAndcodeMap,
            OpCodeAndCode opcodeAndCode) {
        if (opcodeAndCode.hasArguments()) {
            //Miscellaneous.println("----------------"+ opcodeAndCode.opCode);
            opcodeAndCode.codeWithDefaultAgument = opcodeAndCode.getCodeWithArguments
                    (BytecodeProcessor.getAllParameterSizes(opcodeAndCode.opCode),
                    BytecodeProcessor.getTotalParameterSize(opcodeAndCode.opCode));
        } else {
            opcodeAndCode.codeWithDefaultAgument = opcodeAndCode.code;
        }
        opcodeAndcodeMap.put(opcodeAndCode.opCode, opcodeAndCode);
    }

    public static void test() {
        BytecodeDefinationsReader bcDefReader = BytecodeDefinationsReader.getInstanceOf();

        Map<Integer, OpCodeAndCode> opcodeAndcodeMap = bcDefReader.readFromFile();
        Set keySet = opcodeAndcodeMap.keySet();
        Iterator it = keySet.iterator();
        String ret = "";
        while (it.hasNext()) {
            Integer key = (Integer) it.next();
            OpCodeAndCode code = opcodeAndcodeMap.get(key);
            ret = "code = " + code + "\n";
            Miscellaneous.println(ret);
        }

    }
    //Uncomment for testing

    public static void main(String args[]) {
        test();
    }
}
